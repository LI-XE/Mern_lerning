1. Create a database called 'my_first_db'.

use my_first_db
switched to db my_first_db

2. Create students collection.

db.createCollection("students")
{ "ok" : 1 }

3. Each document you insert into this collection should have the following format: ({name: STRING, home_state: STRING, lucky_number: NUMBER, birthday: {month: NUMBER, day: NUMBER, year: NUMBER}})
   
   Create 5 students with the appropriate info.

db.students.insert({ name:"Trey", home_state:"Washington", lucky_number: 5, birthday: {month: 3, day: 20, year: 1992 }})
WriteResult({ "nInserted" : 1 })
db.students.insert({ name: "Tom", home_state:"California", lucky_number: 8, birthday: { month:5, day:10, year: 1970}})
WriteResult({ "nInserted" : 1 })
> db.students.insert({name:"Jack", home_state:"Virginia", lucky_number: 2, birthday:{ month:10, day: 3, year:2000}})
WriteResult({ "nInserted" : 1 })
db.students.insert({name:"Katie", home_state:"California", lucky_number:1, birthday:{month:7, day:7, year:1992}})
WriteResult({ "nInserted" : 1 })
> db.students.insert({name:"Henry", home_state:"Texas", lucky_number:3, birthday:{month:3, day:12, year:1983}})
WriteResult({ "nInserted" : 1 })

5. Get all students

db.students.find().pretty()
{
        "_id" : ObjectId("60c434c494d799204b9f84dd"),
        "name" : "Trey",
        "home_state" : "Washington",
        "lucky_number" : 5,
        "birthday" : {
                "month" : 3,
                "day" : 20,
                "year" : 1992
        }
}
{
        "_id" : ObjectId("60c4355f94d799204b9f84de"),
        "name" : "Tom",
        "home_state" : "California",
        "lucky_number" : 8,
        "birthday" : {
                "month" : 5,
                "day" : 10,
                "year" : 1970
        }
}
{
        "_id" : ObjectId("60c435eb94d799204b9f84df"),
        "name" : "Jack",
        "home_state" : "Virginia",
        "lucky_number" : 2,
        "birthday" : {
                "month" : 10,
                "day" : 3,
                "year" : 2000
        }
}
{
        "_id" : ObjectId("60c436df94d799204b9f84e0"),
        "name" : "Katie",
        "home_state" : "California",
        "lucky_number" : 1,
        "birthday" : {
                "month" : 7,
                "day" : 7,
                "year" : 1992
        }
}
{
        "_id" : ObjectId("60c4372d94d799204b9f84e1"),
        "name" : "Henry",
        "home_state" : "Texas",
        "lucky_number" : 3,
        "birthday" : {
                "month" : 3,
                "day" : 12,
                "year" : 1983
        }
}

6. Retrieve all students who are from California (San Jose Dojo) or Washington (Seattle Dojo).

db.students.find({home_state: {$in: ["California", "Washington"]}}).pretty()
"or"
db.students.find({$or: [{home_state:'California'}, {home_state:'Washington'}]}).pretty()
{
        "_id" : ObjectId("60c434c494d799204b9f84dd"),
        "name" : "Trey",
        "home_state" : "Washington",
        "lucky_number" : 5,
        "birthday" : {
                "month" : 3,
                "day" : 20,
                "year" : 1992
        }
}
{
        "_id" : ObjectId("60c4355f94d799204b9f84de"),
        "name" : "Tom",
        "home_state" : "California",
        "lucky_number" : 8,
        "birthday" : {
                "month" : 5,
                "day" : 10,
                "year" : 1970
        }
}
{
        "_id" : ObjectId("60c436df94d799204b9f84e0"),
        "name" : "Katie",
        "home_state" : "California",
        "lucky_number" : 1,
        "birthday" : {
                "month" : 7,
                "day" : 7,
                "year" : 1992
        }
}

7. Get all students whose lucky number is greater than 3

db.students.find({lucky_number:{$gt:3}})
{ "_id" : ObjectId("60c434c494d799204b9f84dd"), "name" : "Trey", "home_state" : "Washington", "lucky_number" : 5, "birthday" : { "month" : 3, "day" : 20, "year" : 1992 } }
{ "_id" : ObjectId("60c4355f94d799204b9f84de"), "name" : "Tom", "home_state" : "California", "lucky_number" : 8, "birthday" : { "month" : 5, "day" : 10, "year" : 1970 } }

8. Get all students whose lucky number is less than or equal to 10

db.students.find({lucky_number:{$lte:10}})
{ "_id" : ObjectId("60c434c494d799204b9f84dd"), "name" : "Trey", "home_state" : "Washington", "lucky_number" : 5, "birthday" : { "month" : 3, "day" : 20, "year" : 1992 } }
{ "_id" : ObjectId("60c4355f94d799204b9f84de"), "name" : "Tom", "home_state" : "California", "lucky_number" : 8, "birthday" : { "month" : 5, "day" : 10, "year" : 1970 } }
{ "_id" : ObjectId("60c435eb94d799204b9f84df"), "name" : "Jack", "home_state" : "Virginia", "lucky_number" : 2, "birthday" : { "month" : 10, "day" : 3, "year" : 2000 } }
{ "_id" : ObjectId("60c436df94d799204b9f84e0"), "name" : "Katie", "home_state" : "California", "lucky_number" : 1, "birthday" : { "month" : 7, "day" : 7, "year" : 1992 } }
{ "_id" : ObjectId("60c4372d94d799204b9f84e1"), "name" : "Henry", "home_state" : "Texas", "lucky_number" : 3, "birthday" : { "month" : 3, "day" : 12, "year" : 1983 } }

9. Get all students whose lucky number is between 1 and 9 (inclusive)

db.students.find({lucky_number:{$gte:1,$lte:9}})
{ "_id" : ObjectId("60c434c494d799204b9f84dd"), "name" : "Trey", "home_state" : "Washington", "lucky_number" : 5, "birthday" : { "month" : 3, "day" : 20, "year" : 1992 } }
{ "_id" : ObjectId("60c4355f94d799204b9f84de"), "name" : "Tom", "home_state" : "California", "lucky_number" : 8, "birthday" : { "month" : 5, "day" : 10, "year" : 1970 } }
{ "_id" : ObjectId("60c435eb94d799204b9f84df"), "name" : "Jack", "home_state" : "Virginia", "lucky_number" : 2, "birthday" : { "month" : 10, "day" : 3, "year" : 2000 } }
{ "_id" : ObjectId("60c436df94d799204b9f84e0"), "name" : "Katie", "home_state" : "California", "lucky_number" : 1, "birthday" : { "month" : 7, "day" : 7, "year" : 1992 } }
{ "_id" : ObjectId("60c4372d94d799204b9f84e1"), "name" : "Henry", "home_state" : "Texas", "lucky_number" : 3, "birthday" : { "month" : 3, "day" : 12, "year" : 1983 } }

10. Add a field to each student collection called 'interests' that is an ARRAY. It should contain the following entries: 'coding', 'brunch', 'MongoDB'. Do this in ONE operation.

db.students.update({},{$set:{interests:["coding","brunch","MongoDB"]}},{multi:true})
WriteResult({ "nMatched" : 5, "nUpserted" : 0, "nModified" : 5 })

11. Add some unique interests for each particular student into each of their interest arrays.

db.students.update({name:"Trey"},{$push:{interests:"fishing"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.update({name:"Tom"},{$push:{interests:"hiking"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.update({name:"Jack"},{$push:{interests:"cooking"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.update({name:"Katie"},{$push:{interests:"game"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.update({name:"Henry"},{$push:{interests:"camping"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

12. Add the interest 'taxes' into someone's interest array.

db.students.update({name:"Trey"},{$push:{interests:"taxes"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

13. Remove the 'taxes' interest you just added.

db.students.update({name:"Trey"},{$pull:{interests:"taxes"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

14. Remove all students who are from California.

db.students.remove({home_state:"California"})
WriteResult({ "nRemoved" : 2 })

15. Remove a student by name.

db.students.remove({name:"Trey"})
WriteResult({ "nRemoved" : 1 })

16. Remove a student whose lucky number is greater than 5 (JUST ONE)

db.students.remove({lucky_number: {$gt: 5}}, true)
WriteResult({ "nRemoved" : 0 })

17. Add a field to each student collection called 'number_of_belts' and set it to 0.

db.students.update({}, {$set: {number_of_belts: 0}}, {multi: true})
WriteResult({ "nMatched" : 2, "nUpserted" : 0, "nModified" : 2 })

18. Increment this field by 1 for all students in Texas.

db.students.update({home_state:"Texas"},{$inc:{number_of_belts:1}},{multi:true})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

19. Rename the 'number_of_belts' field to 'belts_earned'	

db.students.update({},{$rename:{"number_of_belts":"belts_earned"}},{multi:true})
WriteResult({ "nMatched" : 2, "nUpserted" : 0, "nModified" : 2 })

20. Remove the 'lucky_number' field.

db.students.update({}, {$unset:{lucky_number:""}},{multi:true})
WriteResult({ "nMatched" : 2, "nUpserted" : 0, "nModified" : 2 })

21. Add a 'updated_on' field, and set the value as the current date.	

db.students.update({},{$currentDate:{updated_on:true}},{multi:true})
WriteResult({ "nMatched" : 2, "nUpserted" : 0, "nModified" : 2 })







